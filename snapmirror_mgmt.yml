---
- hosts: localhost
  collections:
  - netapp.ontap
  gather_facts: no
  name: SnapMirror Configuration
  vars:
    input: &login
      hostname: "{{ dest_netapp_hostname }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
  vars_files:
    - vars/snapmirror_vars.yml

  tasks:

# SnapMirror Configuration

  - name: Create Destination Volume
    na_ontap_volume:
      state: "{{ state }}"
      name: "{{ dest_volname }}"
      aggregate_name: "{{ dest_aggr }}"
      size: "{{ dest_vol_size }}"
      size_unit: "{{ dest_vol_size_units }}"
      type: "{{ vol_sm_type }}"
      space_guarantee: "none"
      vserver: "{{ peer_vserver }}"
      wait_for_completion: True
      <<: *login
    when: state == 'present'

# SnapMirror Configuration on Destination

  - name: "{{ 'Create' if state == 'present' else 'Destroy' }} SnapMirror relationship on Destination"
    na_ontap_snapmirror:
      state: "{{ state }}"
      source_vserver: "{{ svm }}"
      source_volume: "{{ volname }}"
      source_hostname: "{{ source_netapp_hostname }}"
      destination_volume: "{{ dest_volname }}"
      destination_vserver: "{{ peer_vserver }}"
      schedule: "1min"
      initialize: True
      policy: "{{ sm_policy }}"
      relationship_type:    "{{ sm_type }}"
      <<: *login

# # Wait for SnapMirror to initialize

#   - name: sleep for 20 seconds and continue with play
#     wait_for: timeout=20
#     delegate_to: localhost
#     when: state == 'present'

# # Mount volume(s) on SVM namespace

#   - name: Mount volume
#     na_ontap_volume:
#       state: "{{ state }}"
#       name: "{{ dest_volname }}"
#       junction_path: "/{{ dest_volname }}"
#       vserver: "{{ peer_vserver }}"
#       <<: *login
#     when: state == 'present'
