---
- hosts: localhost
  collections:
  - netapp.ontap
  gather_facts: no
  name: SnapMirror Configuration
  vars:
    input: &login
      hostname: "{{ dest_netapp_hostname }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
  vars_files:
    - std_cluster_config_vars.yml
    - snapmirror_vars.yml
  # vars_prompt:
  #  name: "netapp_password"
  #  prompt: "Enter NetApp Admin Password"
  #  private: yes
  tasks:

# SnapMirror Configuration on Destination

  - name: Delete SnapMirror on Destination
    na_ontap_snapmirror:
      state: "{{ state }}"
      source_volume: "{{ svm_vol_name }}"
      destination_volume: "{{ svm_vol_name }}"
      source_vserver: "{{ svm }}"
      source_hostname: "{{ sour_netapp_hostname }}"
      destination_vserver: "{{ peer_vserver }}"
      schedule: "1min"
      initialize: True
      # hostname: "{{ dest_netapp_hostname }}"
      <<: *login

  # SnapMirror Configuration
  # Mount volume(s) on SVM namespace
  - name: Mount volume
    na_ontap_volume:
      state: "{{ state }}"
      name: "{{ svm_vol_name }}"
      junction_path: "/{{ svm_vol_name }}"
      vserver: "{{ peer_vserver }}"
      hostname: "{{ dest_netapp_hostname }}"
      <<: *login

  - name: Delete Destination Volume
    na_ontap_volume:
      # state: "{{ state }}"
      state: absent
      name: "{{ svm_vol_name }}"
      # nodename: "{{ dest_cluster }}-01"
      aggregate_name: "{{ peer_dest_aggregate }}"
      size: "{{ dest_vol_size }}"
      size_unit: "{{ dest_vol_size_units }}"
      type: "{{ vol_sm_type }}"
      space_guarantee: "none"
      vserver: "{{ peer_vserver }}"
      # hostname: "{{ dest_netapp_hostname }}"
      <<: *login






