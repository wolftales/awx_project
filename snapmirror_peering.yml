---
- hosts: localhost
  collections:
    - netapp.ontap
  gather_facts: no
  name: Peering Configuration for Cluster and SVM
  vars_files:
    - vars/snapmirror_vars.yml

  tasks:

# Peer Cluster

  - name: Create cluster peer "{{ source_cluster }} < = > {{ dest_cluster }}"
    na_ontap_cluster_peer:
      state: "{{ state }}"
      source_intercluster_lifs: "{{ source_intercluster_lif }}"
      dest_intercluster_lifs: "{{ dest_intercluster_lif }}"
      passphrase: "{{ passphrase }}"
      dest_hostname: "{{ dest_netapp_hostname }}"
      hostname: "{{ source_netapp_hostname }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    when: state == 'present'

# Peer SVM

  - name: Source vserver peer "{{ 'create' if state == 'present' else 'destroy' }}"
    na_ontap_vserver_peer:
      state: "{{ state }}"
      peer_vserver: "{{ dest_svm }}"
      peer_cluster: "{{ peer_cluster }}"
      vserver: "{{ source_svm }}"
      applications: snapmirror
      dest_hostname: "{{ dest_netapp_hostname }}"
      hostname: "{{ source_netapp_hostname }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false

# Peer Cluster

  - name: Destroy cluster peer "{{ source_cluster }} < = > {{ dest_cluster }}"
    na_ontap_cluster_peer:
      state: "{{ state }}"
      source_cluster_name: "{{ source_cluster }}"
      dest_cluster_name: "{{ dest_cluster }}"
      passphrase: "{{ passphrase }}"
      dest_hostname: "{{ dest_netapp_hostname }}"
      hostname: "{{ source_netapp_hostname }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    when: state == 'absent'

# Create a custom Schedule

  - name: Create Custom Job Schedule for SnapMirror
    na_ontap_job_schedule:
      state: "{{ state }}"
      name: "1min"
      job_minutes: -1
      use_rest: Never
      hostname: "{{ dest_netapp_hostname }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    when: state == 'present'
